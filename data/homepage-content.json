{
  "hero": {
    "title": "Pikku",
    "subtitle": "One Function, Every Protocol",
    "description": "Write TypeScript functions once, trigger them with HTTP, WebSocket, cron jobs, queues, and more. Pikku is the swiss knife for building scalable applications with full type safety.",
    "features": [
      "Same function can handle RPC, HTTP, SSE, WebSocket, CronJobs, and Queues",
      "Auto-generated mini TypeScript SDKs for all transform with complete type safety",
      "Deploy anywhere - Express, Lambda, Cloudflare, Next.js, Azure and more"
    ],
    "primaryCta": "Build Your First API",
    "secondaryCta": "View on GitHub"
  },
  "typeSafety": {
    "title": "Full Type Safety from Server to Client",
    "description": "Write once, get TypeScript autocomplete everywhere",
    "comingSoon": "üé¨ Coming Soon: Interactive demo showing:",
    "serverSide": {
      "title": "üìù Server Side",
      "features": [
        "Write pikkuFunc with types",
        "Export function",
        "Run CLI command"
      ]
    },
    "clientSide": {
      "title": "‚ú® Client Side",
      "features": [
        "Full TypeScript autocomplete",
        "Automatic type checking",
        "Runtime validation"
      ]
    },
    "benefits": [
      {
        "icon": "‚ö°",
        "title": "Instant Feedback",
        "description": "See type errors as you type"
      },
      {
        "icon": "üîÑ",
        "title": "Always in Sync",
        "description": "Client types update automatically"
      },
      {
        "icon": "üõ°Ô∏è",
        "title": "Runtime Safe",
        "description": "Validation matches your types"
      }
    ],
    "demoNote": "Demo GIF will show live TypeScript intellisense flowing from server function definitions to client usage"
  },
  "platformTools": {
    "title": "All the tools needed for scaleable backend platforms",
    "description": "Build your backend with all the different tools you need, without having to learn a new framework for each decision",
    "transports": [
      {
        "id": "http",
        "name": "HTTP APIs",
        "description": "REST endpoints with automatic OpenAPI documentation",
        "supportedRuntimes": ["AWS Lambda", "Cloudflare Workers", "Express", "Fastify", "Next.js", "uWS", "WS", "Azure Functions", "Google Cloud Functions"]
      },
      {
        "id": "websocket", 
        "name": "WebSocket",
        "description": "Real-time bidirectional communication",
        "supportedRuntimes": ["AWS Lambda", "Cloudflare Workers", "Express", "Fastify", "uWS", "WS"]
      },
      {
        "id": "sse",
        "name": "Server-Sent Events", 
        "description": "Streaming data to clients",
        "supportedRuntimes": ["Express", "Fastify", "Next.js", "uWS"]
      },
      {
        "id": "cron",
        "name": "Scheduled Tasks",
        "description": "Cron jobs and background processing",
        "supportedRuntimes": ["AWS Lambda", "Cloudflare Workers", "Azure Functions", "Google Cloud Functions"]
      },
      {
        "id": "queues",
        "name": "Background Queues",
        "description": "Reliable message processing",
        "supportedRuntimes": ["AWS Lambda", "Express", "Fastify", "Azure Functions", "Google Cloud Functions"]
      },
      {
        "id": "rpc",
        "name": "RPC Services",
        "description": "Type-safe service-to-service communication",
        "supportedRuntimes": ["Express", "Fastify", "AWS Lambda"]
      },
      {
        "id": "mcp",
        "name": "MCP Server",
        "description": "Expose functions as Model Control Protocol tools for AI models",
        "supportedRuntimes": ["MCP Server"]
      }
    ]
  },
  "transports": {
    "http": {
      "title": "HTTP APIs",
      "description": "Build REST APIs and handle HTTP requests with full type safety and automatic OpenAPI generation.",
      "supportedRuntimes": ["AWS", "Cloudflare", "Express", "Fastify", "nextJS"],
      "specialFeatures": [
        "Automatic OpenAPI documentation",
        "Auth & Permissions",
        "Middleware",
        "Progressively enhancement to stream"
      ],
      "functions": "export const createTodo = pikkuFunc<\n  { text: string; priority: 'low' | 'medium' | 'high' },\n  { todoId: string; createdAt: string }\n>(async ({ logger, kysely }, data, session) => {\n  logger.info(`Creating todo for user ${session.userId}`)\n  \n  const todo = await kysely\n    .insertInto('todo')\n    .values({\n      text: data.text,\n      priority: data.priority,\n      createdBy: session.userId,\n      createdAt: new Date().toISOString()\n    })\n    .returning(['todoId', 'createdAt'])\n    .executeTakeFirstOrThrow()\n    \n  return todo\n})\n\nexport const getTodos = pikkuSessionlessFunc<\n  void,\n  Array<{ todoId: string; text: string; createdBy: string }>\n>(async ({ kysely }) => {\n  return await kysely\n    .selectFrom('todo')\n    .select(['todoId', 'text', 'createdBy'])\n    .orderBy('createdAt', 'desc')\n    .execute()\n})",
      "wiring": "// POST with authentication and validation\naddHTTPRoute({\n  method: 'post',\n  route: '/todo',\n  func: createTodo,\n  auth: true,\n  permissions: {\n    canCreateTodo: async (services, data, session) => {\n      return session?.role === 'user' || session?.role === 'admin'\n    }\n  },\n  docs: {\n    description: 'Create a new todo item',\n    tags: ['todos'],\n  },\n})\n\n// GET without authentication\naddHTTPRoute({\n  method: 'get',\n  route: '/todos',\n  func: getTodos,\n  auth: false,\n  docs: {\n    description: 'Get all todos',\n    tags: ['todos'],\n  },\n})",
      "client": "import { PikkuFetch } from './pikku-fetch.gen.js'\n\nconst pikkuFetch = new PikkuFetch({\n  serverUrl: process.env.API_BASE_URL\n})\n\n// Set authentication\npikkuFetch.setAPIKey(userApiKey)\n\n// Type-safe POST with body\nconst newTodo = await pikkuFetch.post('/todo', {\n  text: 'Learn Pikku',\n  priority: 'high'\n})\nconsole.log(`Created todo: ${newTodo.todoId}`)\n\n// Type-safe GET\nconst todos = await pikkuFetch.get('/todos')\nconsole.log(`Found ${todos.length} todos`)",
      "docsLink": "/docs/http",
      "readMoreText": "Learn more about HTTP APIs"
    },
    "websocket": {
      "title": "WebSocket & Real-time",
      "description": "Build real-time applications with typed WebSocket connections and pub/sub messaging.",
      "supportedRuntimes": ["AWS", "Cloudflare", "uWS", "ws"],
      "specialFeatures": [
        "Run locally or in a serverless environments",
        "Route to functions based on message action",
        "Built-in pub/sub system"
      ],
      "functions": "export const onConnect = pikkuChannelConnectionFunc<'hello!'>(\n  async ({ logger, channel }) => {\n    logger.info(`Connected to event channel`)\n    channel.send('hello!')\n  }\n)\n\nexport const onDisconnect = pikkuChannelDisconnectionFunc(\n  async ({ logger, channel }) => {\n    logger.info(`Disconnected from event channel`)\n  }\n)\n\nexport const onMessage = pikkuChannelFunc<'hello', 'hey'>(\n  async ({ logger, channel }) => {\n    logger.info(`Got a generic hello message`)\n    channel.send('hey')\n  }\n)",
      "wiring": "addChannel({\n  name: 'events',\n  route: '/',\n  onConnect,\n  onDisconnect,\n  auth: true,\n  onMessage,\n  tags: ['events'],\n})",
      "client": "import { PikkuWebSocket } from './pikku-websocket.gen.js'\n\nconst websocket = new PikkuWebSocket<'events'>(serverUrl, apiKey)\n\nwebsocket.ws.onopen = async () => {\n  console.log('Websocket connected')\n  \n  // Subscribe to global messages\n  websocket.subscribe((data) => {\n    console.log('Global message:', data)\n  })\n  \n  // Send to default handler\n  websocket.send('hello')\n}",
      "docsLink": "/docs/channels",
      "readMoreText": "Learn more about WebSocket & Channels"
    },
    "sse": {
      "title": "Server-Sent Events",
      "description": "Stream real-time data to clients with automatic reconnection and progressive enhancement.",
      "supportedRuntimes": ["Express", "Fastify", "uWS", "nextJS"],
      "specialFeatures": [
        "Simple streaming API",
        "Provide realtime updates",
        "Typed streaming data",
        "Typed SSE Client"
      ],
      "functions": "export const timeSinceOpened = pikkuSessionlessFunc<\n  void,\n  { count: number } | void\n>(async ({ channel }) => {\n  if (!channel) {\n    throw new Error('This function requires a stream.')\n  }\n  const startedAt = Date.now()\n  let count = 0\n  const interval = setInterval(() => {\n    channel.send({ count: count++ })\n    if (Date.now() - startedAt > 5000) {\n      clearInterval(interval)\n      channel.close()\n    }\n  }, 1000)\n\n  return { count }\n})",
      "wiring": "addHTTPRoute({\n  auth: false,\n  method: 'get',\n  route: '/sse',\n  func: timeSinceOpened,\n  sse: true,\n})",
      "client": "import { PikkuFetch } from './pikku-fetch.gen.js'\n\nconst pikkuFetch = new PikkuFetch({\n  serverUrl: process.env.API_BASE_URL\n})\n\n// Type-safe streaming\nconst stream = await pikkuFetch.getSSE('/sse')\n\n// Listen for streaming data\nstream.onMessage((update) => {\n  console.log(`Count: ${update.count}`)\n})",
      "docsLink": "/docs/http/server-sent-events",
      "readMoreText": "Learn more about Server-Sent Events"
    },
    "cron": {
      "title": "Scheduled Tasks",
      "description": "Run cron jobs and scheduled tasks that work across all deployment environments.",
      "supportedRuntimes": ["AWS", "Cloudflare", "Custom"],
      "specialFeatures": [
        "Cron expression support",
        "Timezone handling",
        "Error retry logic",
        "Serverless friendly"
      ],
      "functions": "export const myScheduledTask = pikkuSessionlessFunc<void, void>(\n  async ({ logger }) => {\n    logger.info(\n      `This is a scheduled task that runs every minute, running now at ${new Date().getTime()}`\n    )\n  }\n)",
      "wiring": "addScheduledTask({\n  name: 'myScheduledTask',\n  schedule: '*/1 * * * *',\n  func: myScheduledTask,\n  tags: ['hello'],\n})",
      "docsLink": "/docs/scheduled-tasks",
      "readMoreText": "Learn more about Scheduled Tasks"
    },
    "queues": {
      "title": "Background Queues",
      "description": "Process background jobs with reliable message delivery and retry logic.",
      "supportedRuntimes": ["BullMQ", "AWS SQS"],
      "specialFeatures": [
        "Switch out different queue providers, unlocking scaling opportunities",
        "Supports different queue providers, without locking you in with code."
      ],
      "functions": "export const queueWorker = pikkuSessionlessFunc<\n  { message: string; fail: boolean },\n  { result: string }\n>(async ({}, data) => {\n  await new Promise((resolve) => setTimeout(resolve, 1000))\n  if (data.fail) {\n    throw new Error('Job failed because it was instructed to')\n  }\n  return { result: `echo: ${data.message}` }\n})",
      "wiring": "addQueueWorker({\n  queueName: 'hello-world-queue',\n  func: queueWorker,\n})",
      "docsLink": "/docs/queue",
      "readMoreText": "Learn more about Background Queues"
    },
    "rpc": {
      "title": "RPC & Services",
      "description": "Build type-safe RPC services with automatic client generation and service discovery.",
      "supportedRuntimes": ["Express", "Fastify", "AWS", "Custom"],
      "specialFeatures": [
        "Automatic client generation",
        "Service discovery",
        "Type-safe service calls",
        "Request/response validation"
      ],
      "functions": "export const rpcTest = pikkuSessionlessFunc<{ in: number }>(\n  async ({ logger, rpc }, data) => {\n    logger.debug(`RPC Test with RPC: ${rpc?.depth}`)\n    if (rpc?.depth && rpc?.depth < 10) {\n      data.in += 1\n      await rpc.invoke(`rpcTest`, data)\n    }\n    return data\n  }\n)",
      "docsLink": "/docs/core/rpcs",
      "readMoreText": "Learn more about RPC Services"
    },
    "mcp": {
      "title": "MCP Server",
      "description": "Expose your Pikku functions as Model Control Protocol tools, enabling AI models to interact with your backend services directly.",
      "supportedRuntimes": ["MCP Server"],
      "specialFeatures": [
        "AI model integration",
        "Tool and resource exposure",
        "Type-safe AI interactions",
        "Multiple transport support"
      ],
      "functions": "// MCP Tool: Functions AI can call to perform actions\nexport const sayHello = pikkuMCPToolFunc<{ name?: string }>(\n  async (services, { name = 'World' }) => {\n    return [{\n      type: 'text',\n      text: `Hello, ${name}! This is a Pikku MCP tool.`,\n    }]\n  }\n)\n\n// MCP Resource: Data sources AI can read from\nexport const getUserInfo = pikkuMCPResourceFunc<{ userId: string }>(\n  async (services, { userId }) => {\n    const mockUsers = {\n      '123': { userId: '123', name: 'John Doe', email: 'john@example.com' }\n    }\n    const user = mockUsers[userId]\n    if (!user) throw new NotFoundError(`User not found: ${userId}`)\n    \n    return [{\n      uri: `getUserInfo/${userId}`,\n      text: JSON.stringify(user),\n    }]\n  }\n)\n\n// MCP Prompt: Template generators for AI interactions\nexport const staticPromptGenerator = pikkuMCPPromptFunc<unknown>(async () => {\n  return [{\n    role: 'user',\n    content: {\n      type: 'text',\n      text: `This is a static prompt example.`,\n    },\n  }]\n})",
      "wiring": "addMCPTool({\n  name: 'sayHello',\n  description: 'Greet someone with a friendly hello message',\n  func: sayHello,\n  tags: ['greeting', 'hello', 'demo'],\n})\n\naddMCPResource({\n  uri: 'getUserInfo/{userId}',\n  title: 'User Information',\n  description: 'Retrieve user information by user ID',\n  func: getUserInfo,\n  tags: ['user', 'profile', 'data'],\n})\n\naddMCPPrompt({\n  name: 'staticPromptGenerator',\n  description: 'A static prompt that returns a predefined message',\n  func: staticPromptGenerator,\n})",
      "docsLink": "/docs/mcp",
      "readMoreText": "Learn more about MCP Server"
    }
  },
  "coreFeatures": {
    "title": "Built for Developers",
    "description": "Pikku provides everything you need to build robust, type-safe applications with minimal setup.",
    "features": [
      {
        "icon": "üéØ",
        "title": "Fully Typed",
        "description": "Complete type safety from server to client with automatic type generation"
      },
      {
        "icon": "üîê",
        "title": "Auth & Permissions",
        "description": "Built-in authentication, sessions, and granular permission system"
      },
      {
        "icon": "‚ö°",
        "title": "Middleware",
        "description": "Hook into your functions with middleware for logging, custom validation, and more"
      },
      {
        "icon": "‚öôÔ∏è",
        "title": "Service Injection",
        "description": "Simple dependency injection without decorators or magic"
      }
    ]
  },
  "runAnywhere": {
    "title": "Deploy Anywhere, Scale Everywhere",
    "description": "From serverless functions to traditional servers, from SQS Lambda queues to serverless WebSockets - your Pikku code runs everywhere without modification.",
    "deploymentTypes": [
      {
        "icon": "‚òÅÔ∏è",
        "title": "Serverless First",
        "description": "AWS Lambda, Cloudflare Workers, Vercel Functions - deploy with zero configuration",
        "features": [
          "SQS Lambda Queues",
          "Serverless WebSockets",
          "Scheduled Functions"
        ]
      },
      {
        "icon": "üñ•Ô∏è",
        "title": "Traditional Servers",
        "description": "Express, Fastify, Next.js - integrate with existing applications seamlessly",
        "features": [
          "Middleware Integration",
          "Docker Deployment",
          "Kubernetes Ready"
        ]
      },
      {
        "icon": "üîß",
        "title": "Custom Runtimes",
        "description": "Build your own runtime adapter for any environment or platform",
        "features": [
          "Custom HTTP Handlers",
          "WebSocket Adapters",
          "Scheduler Handlers"
        ]
      }
    ],
    "finalMessage": {
      "icon": "üöÄ",
      "title": "It's all an adapter away",
      "description": "Pikku glues together the pieces you need, so you can build an adaptor to run in any environment."
    }
  },
  "common": {
    "runsOn": "Runs on:",
    "specialFeatures": "Features:"
  }
}