{
  "hero": {
    "title": "Pikku",
    "subtitle": "One Function, Every Protocol",
    "description": "Write TypeScript functions once, trigger them with HTTP, WebSocket, cron jobs, queues, and more. Pikku is the swiss knife for building scalable applications with full type safety.",
    "features": [
      "Same function can handle RPC, HTTP, SSE, WebSocket, CronJobs, and Queues",
      "Auto-generated mini TypeScript SDKs for all transform with complete type safety",
      "Deploy anywhere - Express, Lambda, Cloudflare, Next.js, Azure and more"
    ],
    "primaryCta": "Build Your First API",
    "secondaryCta": "View on GitHub"
  },
  "typeSafety": {
    "title": "Full Type Safety from Server to Client",
    "description": "Write once, get TypeScript autocomplete everywhere",
    "comingSoon": "üé¨ Coming Soon: Interactive demo showing:",
    "serverSide": {
      "title": "üìù Server Side",
      "features": [
        "Write pikkuFunc with types",
        "Export function",
        "Run CLI command"
      ]
    },
    "clientSide": {
      "title": "‚ú® Client Side",
      "features": [
        "Full TypeScript autocomplete",
        "Automatic type checking",
        "Runtime validation"
      ]
    },
    "benefits": [
      {
        "icon": "‚ö°",
        "title": "Instant Feedback",
        "description": "See type errors as you type"
      },
      {
        "icon": "üîÑ",
        "title": "Always in Sync",
        "description": "Client types update automatically"
      },
      {
        "icon": "üõ°Ô∏è",
        "title": "Runtime Safe",
        "description": "Validation matches your types"
      }
    ],
    "demoNote": "Demo GIF will show live TypeScript intellisense flowing from server function definitions to client usage"
  },
  "platformTools": {
    "title": "All the tools needed for scaleable backend platforms",
    "description": "Build your backend with all the different tools you need, without having to learn a new framework for each decision",
    "transports": [
      {
        "id": "http",
        "name": "HTTP APIs",
        "description": "REST endpoints with automatic OpenAPI documentation",
        "supportedRuntimes": ["AWS Lambda", "Cloudflare Workers", "Express", "Fastify", "Next.js", "uWS", "WS", "Azure Functions", "Google Cloud Functions"]
      },
      {
        "id": "websocket", 
        "name": "WebSocket",
        "description": "Real-time bidirectional communication",
        "supportedRuntimes": ["AWS Lambda", "Cloudflare Workers", "Express", "Fastify", "uWS", "WS"]
      },
      {
        "id": "sse",
        "name": "Server-Sent Events", 
        "description": "Streaming data to clients",
        "supportedRuntimes": ["Express", "Fastify", "Next.js", "uWS"]
      },
      {
        "id": "cron",
        "name": "Scheduled Tasks",
        "description": "Cron jobs and background processing",
        "supportedRuntimes": ["AWS Lambda", "Cloudflare Workers", "Azure Functions", "Google Cloud Functions"]
      },
      {
        "id": "queues",
        "name": "Background Queues",
        "description": "Reliable message processing",
        "supportedRuntimes": ["AWS Lambda", "Express", "Fastify", "Azure Functions", "Google Cloud Functions"]
      },
      {
        "id": "rpc",
        "name": "RPC Services",
        "description": "Type-safe service-to-service communication",
        "supportedRuntimes": ["Express", "Fastify", "AWS Lambda"]
      },
      {
        "id": "mcp",
        "name": "MCP Server",
        "description": "Expose functions as Model Control Protocol tools for AI models",
        "supportedRuntimes": ["MCP Server"]
      }
    ]
  },
  "transports": {
    "http": {
      "title": "HTTP APIs",
      "description": "Build REST APIs and handle HTTP requests with full type safety and automatic OpenAPI generation.",
      "supportedRuntimes": ["AWS", "Cloudflare", "Express", "Fastify", "nextJS"],
      "specialFeatures": [
        "Automatic OpenAPI documentation",
        "Auth & Permissions",
        "Middleware",
        "Progressively enhancement to stream"
      ],
      "serverCode": "export const createTodo = pikkuFunc<\n  { title: string; description: string },\n  { id: string; title: string; createdBy: string }\n>(async ({ logger }, data, session) => {\n  // userSession is passed as 3rd parameter\n  const todo = {\n    id: crypto.randomUUID(),\n    title: data.title,\n    description: data.description,\n    createdBy: session.userId,\n    completed: false,\n    createdAt: new Date().toISOString()\n  }\n  \n  logger.info(`Todo created by ${session.userId}`)\n  return todo\n})\n\naddHTTPRoute({\n  method: 'post',\n  route: '/todos',\n  func: createTodo,\n  auth: true, // Requires authentication\n  docs: {\n    description: 'Create a new todo',\n    tags: ['todos'],\n  },\n})",
      "clientCode": "import { createFetchClient } from '@pikku/client-fetch'\n\nconst api = createFetchClient({\n  baseUrl: process.env.API_BASE_URL,\n  token: userToken // Authentication token\n})\n\n// Type-safe API calls\nconst handleCreateTodo = async () => {\n  try {\n    // Full TypeScript intellisense and validation\n    const todo = await api.post('/todos', {\n      title: 'Learn Pikku',\n      description: 'Build my first Pikku application'\n    })\n    \n    console.log(`Created todo: ${todo.title} by ${todo.createdBy}`)\n    return todo\n  } catch (error) {\n    console.error('Failed to create todo:', error)\n    throw error\n  }\n}",
      "docsLink": "/docs/http",
      "readMoreText": "Learn more about HTTP APIs"
    },
    "websocket": {
      "title": "WebSocket & Real-time",
      "description": "Build real-time applications with typed WebSocket connections and pub/sub messaging.",
      "supportedRuntimes": ["AWS", "Cloudflare", "uWS", "ws"],
      "specialFeatures": [
        "Run locally or in a serverless environments",
        "Route to functions based on message action",
        "Built-in pub/sub system"
      ],
      "serverCode": "export const onConnect = pikkuChannelConnectionFunc<{ welcome: string }>(\n  async ({ logger, channel }, session) => {\n    logger.info(`User ${session.userId} connected to chat`)\n    channel.send({\n      welcome: `Welcome ${session.username}!`\n    })\n  }\n)\n\nexport const sendMessage = pikkuChannelFunc<\n  { message: string },\n  { timestamp: string; from: string; message: string }\n>(async ({ channel, eventHub }, data, session) => {\n  // userSession provides authenticated user info\n  const chatMessage = {\n    timestamp: new Date().toISOString(),\n    from: session.username,\n    message: data.message\n  }\n  \n  await eventHub?.publish('chat', channel.channelId, chatMessage)\n  return chatMessage\n})\n\naddChannel({\n  name: 'chat',\n  route: '/chat',\n  onConnect,\n  auth: true, // Requires authentication\n  onMessageRoute: {\n    action: {\n      sendMessage,\n    },\n  },\n})",
      "clientCode": "import { createWebSocketClient } from '@pikku/client-websocket'\n\nconst ws = createWebSocketClient({\n  baseUrl: process.env.WS_BASE_URL,\n  token: userToken // Authentication token\n})\n\n// Type-safe WebSocket communication\nconst handleChat = async () => {\n  try {\n    // Connect to authenticated channel\n    const channel = await ws.connect('/chat')\n    \n    // Listen for messages with full type safety\n    channel.onMessage((message) => {\n      console.log(`${message.from}: ${message.message}`)\n    })\n    \n    // Send type-safe messages\n    await channel.send({\n      action: 'sendMessage',\n      message: 'Hello from Pikku!'\n    })\n    \n  } catch (error) {\n    console.error('Chat connection failed:', error)\n  }\n}",
      "docsLink": "/docs/channels",
      "readMoreText": "Learn more about WebSocket & Channels"
    },
    "sse": {
      "title": "Server-Sent Events",
      "description": "Stream real-time data to clients with automatic reconnection and progressive enhancement.",
      "supportedRuntimes": ["Express", "Fastify", "uWS", "nextJS"],
      "specialFeatures": [
        "Simple streaming API",
        "Provide realtime updates",
        "Typed streaming data",
        "Typed SSE Client"
      ],
      "serverCode": "export const streamUserActivity = pikkuFunc<\n  void,\n  AsyncGenerator<{ timestamp: string; activity: string; userId: string }>\n>(async function* ({ logger }, data, session) {\n  // userSession provides authenticated user info\n  logger.info(`Starting activity stream for user ${session.userId}`)\n  \n  let count = 0\n  while (true) {\n    yield {\n      timestamp: new Date().toISOString(),\n      activity: `User activity update #${++count}`,\n      userId: session.userId\n    }\n    \n    await new Promise(resolve => setTimeout(resolve, 2000))\n  }\n})\n\naddHTTPRoute({\n  method: 'get',\n  route: '/stream/activity',\n  func: streamUserActivity,\n  auth: true, // Requires authentication\n  responseType: 'stream',\n  docs: {\n    description: 'Stream user activity updates',\n    tags: ['streaming'],\n  },\n})",
      "clientCode": "import { createSSEClient } from '@pikku/client-sse'\n\nconst sse = createSSEClient({\n  baseUrl: process.env.API_BASE_URL,\n  token: userToken // Authentication token\n})\n\n// Type-safe streaming\nconst handleActivityStream = async () => {\n  try {\n    // Connect to authenticated stream\n    const stream = await sse.connect('/stream/activity')\n    \n    // Listen for streaming data with full type safety\n    stream.onMessage((update) => {\n      console.log(`${update.timestamp}: ${update.activity}`)\n      console.log(`User: ${update.userId}`)\n    })\n    \n    stream.onError((error) => {\n      console.error('Stream error:', error)\n    })\n    \n    // Stream will automatically reconnect on connection loss\n    \n  } catch (error) {\n    console.error('Failed to start activity stream:', error)\n  }\n}",
      "docsLink": "/docs/http/server-sent-events",
      "readMoreText": "Learn more about Server-Sent Events"
    },
    "cron": {
      "title": "Scheduled Tasks",
      "description": "Run cron jobs and scheduled tasks that work across all deployment environments.",
      "supportedRuntimes": ["AWS", "Cloudflare", "Custom"],
      "specialFeatures": [
        "Cron expression support",
        "Timezone handling",
        "Error retry logic",
        "Serverless friendly"
      ],
      "codeSnippet": "export const dailyReportTask = pikkuVoidFunc(\n  async ({ logger, emailService, analyticsService }) => {\n    try {\n      // Generate daily metrics report\n      const metrics = await analyticsService.getDailyMetrics()\n      \n      // Send report to admin team\n      await emailService.sendReport({\n        to: 'admin@company.com',\n        subject: 'Daily Metrics Report',\n        data: {\n          totalUsers: metrics.activeUsers,\n          totalRequests: metrics.apiCalls,\n          avgResponseTime: metrics.avgResponseTime,\n          date: new Date().toISOString().split('T')[0]\n        }\n      })\n      \n      logger.info(`Daily report sent - ${metrics.activeUsers} active users`)\n    } catch (error) {\n      logger.error('Failed to generate daily report:', error)\n      throw error // Will trigger retry logic\n    }\n  }\n)\n\naddScheduledTask({\n  name: 'dailyReport',\n  schedule: '0 8 * * *', // Daily at 8 AM\n  func: dailyReportTask,\n  timezone: 'America/New_York',\n  docs: {\n    description: 'Generate and send daily metrics report',\n    tags: ['reports', 'analytics'],\n  },\n})",
      "docsLink": "/docs/scheduled-tasks",
      "readMoreText": "Learn more about Scheduled Tasks"
    },
    "queues": {
      "title": "Background Queues",
      "description": "Process background jobs with reliable message delivery and retry logic.",
      "supportedRuntimes": ["BullMQ", "AWS SQS"],
      "specialFeatures": [
        "Switch out different queue providers, unlocking scaling opportunities",
        "Supports different queue providers, without locking you in with code."
      ],
      "codeSnippet": "export const processImageResize = pikkuSessionlessFunc<\n  { imageUrl: string; sizes: number[]; userId: string },\n  { processedImages: Array<{ size: number; url: string }> }\n>(async ({ logger, imageService, storageService }, data) => {\n  try {\n    logger.info(`Processing image resize for user ${data.userId}`)\n    \n    const processedImages = []\n    \n    for (const size of data.sizes) {\n      // Resize image to specified size\n      const resizedBuffer = await imageService.resize(data.imageUrl, size)\n      \n      // Upload to storage\n      const uploadedUrl = await storageService.upload({\n        buffer: resizedBuffer,\n        filename: `${data.userId}/resized_${size}px.jpg`,\n        contentType: 'image/jpeg'\n      })\n      \n      processedImages.push({ size, url: uploadedUrl })\n    }\n    \n    logger.info(`Successfully processed ${processedImages.length} image sizes`)\n    return { processedImages }\n    \n  } catch (error) {\n    logger.error('Failed to process image:', error)\n    throw error // Will trigger retry logic\n  }\n})\n\naddQueueWorker({\n  name: 'image-processing',\n  func: processImageResize,\n  concurrency: 3,\n  retryOptions: {\n    attempts: 3,\n    backoff: 'exponential',\n    delay: 2000,\n  },\n})",
      "docsLink": "/docs/queue",
      "readMoreText": "Learn more about Background Queues"
    },
    "rpc": {
      "title": "RPC & Services",
      "description": "Build type-safe RPC services with automatic client generation and service discovery.",
      "supportedRuntimes": ["Express", "Fastify", "AWS", "Custom"],
      "specialFeatures": [
        "Automatic client generation",
        "Service discovery",
        "Type-safe service calls",
        "Request/response validation"
      ],
      "serverCode": "export const getUserProfile = pikkuSessionFunc<\n  { userId: string },\n  { id: string; name: string; email: string; organizationId: string }\n>(async ({ logger, userService }, { userId }, session) => {\n  // userSession provides authenticated user info\n  logger.info(`Getting profile for user ${userId} from org ${session.organizationId}`)\n  \n  const user = await userService.findUserInOrganization({\n    userId,\n    organizationId: session.organizationId\n  })\n  \n  if (!user) {\n    throw new Error('User not found or access denied')\n  }\n  \n  return {\n    id: user.id,\n    name: user.name,\n    email: user.email,\n    organizationId: user.organizationId\n  }\n})\n\nexport const updateUserProfile = pikkuSessionFunc<\n  { userId: string; name?: string; email?: string },\n  { success: boolean; updatedAt: string }\n>(async ({ userService }, { userId, ...updates }, session) => {\n  await userService.updateUser(userId, updates, session.organizationId)\n  \n  return {\n    success: true,\n    updatedAt: new Date().toISOString()\n  }\n})\n\naddRPCService({\n  name: 'user-service',\n  version: '1.0.0',\n  methods: {\n    getUserProfile,\n    updateUserProfile,\n  },\n  auth: true\n})",
      "clientCode": "import { createRPCClient } from '@pikku/client-rpc'\n\nconst userService = createRPCClient({\n  service: 'user-service',\n  version: '1.0.0',\n  baseUrl: process.env.API_BASE_URL,\n  token: userToken // Authentication token\n})\n\n// Type-safe service calls\nconst handleUserOperations = async (userId: string) => {\n  try {\n    // Get user profile with full type safety\n    const user = await userService.getUserProfile({ \n      userId \n    })\n    \n    console.log(`User: ${user.name} (${user.email})`)\n    console.log(`Organization: ${user.organizationId}`)\n    \n    // Update user profile\n    const updateResult = await userService.updateUserProfile({\n      userId,\n      name: 'New Name',\n      email: 'new@example.com'\n    })\n    \n    console.log(`Update successful: ${updateResult.success}`)\n    console.log(`Updated at: ${updateResult.updatedAt}`)\n    \n    return user\n  } catch (error) {\n    console.error('User operation failed:', error)\n    throw error\n  }\n}",
      "docsLink": "/docs/core/rpcs",
      "readMoreText": "Learn more about RPC Services"
    },
    "mcp": {
      "title": "MCP Server",
      "description": "Expose your Pikku functions as Model Control Protocol tools, enabling AI models to interact with your backend services directly.",
      "supportedRuntimes": ["MCP Server"],
      "specialFeatures": [
        "AI model integration",
        "Tool and resource exposure",
        "Type-safe AI interactions",
        "Multiple transport support"
      ],
      "codeSnippet": "export const getUserData = pikkuFunc<\n  { userId: string },\n  { id: string; name: string; email: string }\n>(async ({ userService }, { userId }) => {\n  const user = await userService.findById(userId)\n  \n  return {\n    id: user.id,\n    name: user.name,\n    email: user.email\n  }\n})\n\nexport const searchUsers = pikkuFunc<\n  { query: string; limit?: number },\n  { users: Array<{ id: string; name: string }> }\n>(async ({ userService }, { query, limit = 10 }) => {\n  const users = await userService.search(query, limit)\n  \n  return {\n    users: users.map(u => ({ id: u.id, name: u.name }))\n  }\n})\n\n// Expose functions as MCP tools\ncreateMcpServer({\n  name: 'user-management-server',\n  version: '1.0.0',\n  functions: {\n    getUserData,\n    searchUsers\n  },\n  resources: {\n    'user-profiles': {\n      description: 'User profile data',\n      handler: async (resourceId) => {\n        return await getUserData({ userId: resourceId })\n      }\n    }\n  }\n})",
      "docsLink": "/docs/mcp",
      "readMoreText": "Learn more about MCP Server"
    }
  },
  "coreFeatures": {
    "title": "Built for Developers",
    "description": "Pikku provides everything you need to build robust, type-safe applications with minimal setup.",
    "features": [
      {
        "icon": "üéØ",
        "title": "Fully Typed",
        "description": "Complete type safety from server to client with automatic type generation"
      },
      {
        "icon": "üîê",
        "title": "Auth & Permissions",
        "description": "Built-in authentication, sessions, and granular permission system"
      },
      {
        "icon": "‚ö°",
        "title": "Middleware",
        "description": "Hook into your functions with middleware for logging, custom validation, and more"
      },
      {
        "icon": "‚öôÔ∏è",
        "title": "Service Injection",
        "description": "Simple dependency injection without decorators or magic"
      }
    ]
  },
  "runAnywhere": {
    "title": "Deploy Anywhere, Scale Everywhere",
    "description": "From serverless functions to traditional servers, from SQS Lambda queues to serverless WebSockets - your Pikku code runs everywhere without modification.",
    "deploymentTypes": [
      {
        "icon": "‚òÅÔ∏è",
        "title": "Serverless First",
        "description": "AWS Lambda, Cloudflare Workers, Vercel Functions - deploy with zero configuration",
        "features": [
          "SQS Lambda Queues",
          "Serverless WebSockets",
          "Scheduled Functions"
        ]
      },
      {
        "icon": "üñ•Ô∏è",
        "title": "Traditional Servers",
        "description": "Express, Fastify, Next.js - integrate with existing applications seamlessly",
        "features": [
          "Middleware Integration",
          "Docker Deployment",
          "Kubernetes Ready"
        ]
      },
      {
        "icon": "üîß",
        "title": "Custom Runtimes",
        "description": "Build your own runtime adapter for any environment or platform",
        "features": [
          "Custom HTTP Handlers",
          "WebSocket Adapters",
          "Scheduler Handlers"
        ]
      }
    ],
    "finalMessage": {
      "icon": "üöÄ",
      "title": "It's all an adapter away",
      "description": "Pikku glues together the pieces you need, so you can build an adaptor to run in any environment."
    }
  },
  "common": {
    "runsOn": "Runs on:",
    "specialFeatures": "Features:"
  }
}